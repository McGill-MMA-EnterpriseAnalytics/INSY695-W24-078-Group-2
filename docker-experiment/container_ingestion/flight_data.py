"""
This module contains all of the code required to extract
flight departures out of YUL from the Aviationstack API.
"""
from pathlib import Path
import glob
import requests
import pandas as pd
import arrow

# Setting up API Base URL + Credentials
# For information relating to the API, please refer: https://aviationstack.com/documentation

base_url: str = "https://api.aviationstack.com/v1/flights"
api_key: str = "*****************************"

# Setting up dates using arrow to pull last 90 days of data
# 90 days chosen since this is the maximum lookback window permitted by the aviationstack API
today = arrow.now()                             # grabbing today's date
start_date = today.shift(days = -90)            # date when to start the 90 day lookback window
offsets: list[int] = [0, 100, 200]              # working around API response pagination

def pull_aviationstack_data() -> None:

    """ Code executed to pull data from the API using above mentioned API credentials"""

    # output file path
    output_path: Path = Path().absolute() / "data"

    for i in range(91):

        dte = start_date.shift(days = i).format('YYYY-MM-DD')

        for offset in offsets:

            query_params: dict = {
                "access_key": api_key,
                "flight_date": dte,
                "limit": 100,
                "offset": offset,
                "dep_iata": "YUL",
            }

            response = requests.get(base_url, query_params)

            if response.status_code == 200:

                response_json = response.json()

                required_data = response_json.get('data', [])

                structured_data: list = []

                for flight in required_data:

                    if isinstance(flight, dict):

                        if flight['flight'].get('codeshared') is None:

                            structured_data.append({
                                'Flight Status': flight['flight_status'],
                                'Departure Airport': flight['departure'].get('iata', ''),
                                'Departure Gate': flight['departure'].get('gate', ''),
                                'Arrival IATA Code': flight['arrival'].get('iata', ''),
                                'Scheduled Departure': flight['departure'].get('scheduled', ''),
                                'Actual Departure': flight['departure'].get('actual', ''),
                                'Delay (in Minutes)': flight['departure'].get('delay', 0),
                                'Airline Name': flight['airline'].get('name', ''),
                                'Flight Number': flight['flight'].get('iata', ''),
                            })

                departures_df: pd.DataFrame = pd.DataFrame(structured_data)

                output_filename: str = f"YUL_Departures_{dte}_{offset}.csv"

                departures_df.to_csv(output_path/output_filename, index = False)

def concatenate_departures_data() -> None:

    """Putting together all the individual data files generated by the API pull"""

    full_departures_df: pd.DataFrame = pd.DataFrame() # initializing empty df

    for departure_csv in glob.glob('/data/YUL_Departures_*.csv'):

        try:
            file: pd.DataFrame = pd.read_csv(departure_csv)

            if not file.empty:

                full_departures_df = pd.concat([full_departures_df], ignore_index= True)
        except pd.errors.EmptyDataError:

            print(f"Skipping file {departure_csv} since it is empty...")

    full_departures_df.to_csv('/data/Full_Departures_Data.csv', index = False)

if __name__ == "__main__":

    pull_aviationstack_data()

    concatenate_departures_data()
